#ifndef SYMBOL_H
#define SYMBOL_H

typedef enum {
  SYMBOL_RANGE_KEYWORD_BEGIN,
  SYMBOL_KEYWORD_AND = SYMBOL_RANGE_KEYWORD_BEGIN,
  SYMBOL_KEYWORD_ARRAY,
  SYMBOL_KEYWORD_BEGIN,
  SYMBOL_KEYWORD_BOOLEAN,
  SYMBOL_KEYWORD_BREAK,
  SYMBOL_KEYWORD_CALL,
  SYMBOL_KEYWORD_CHAR,
  SYMBOL_KEYWORD_DIV,
  SYMBOL_KEYWORD_DO,
  SYMBOL_KEYWORD_ELSE,
  SYMBOL_KEYWORD_END,
  SYMBOL_KEYWORD_FALSE,
  SYMBOL_KEYWORD_IF,
  SYMBOL_KEYWORD_INTEGER,
  SYMBOL_KEYWORD_NOT,
  SYMBOL_KEYWORD_OF,
  SYMBOL_KEYWORD_OR,
  SYMBOL_KEYWORD_PROCEDURE,
  SYMBOL_KEYWORD_PROGRAM,
  SYMBOL_KEYWORD_READ,
  SYMBOL_KEYWORD_READLN,
  SYMBOL_KEYWORD_RETURN,
  SYMBOL_KEYWORD_THEN,
  SYMBOL_KEYWORD_TRUE,
  SYMBOL_KEYWORD_VAR,
  SYMBOL_KEYWORD_WHILE,
  SYMBOL_KEYWORD_WRITE,
  SYMBOL_KEYWORD_WRITELN,
  SYMBOL_RANGE_KEYWORD_END,

  SYMBOL_RANGE_OPERATOR_BEGIN = SYMBOL_RANGE_KEYWORD_END,
  SYMBOL_OPERATOR_PLUS        = SYMBOL_RANGE_OPERATOR_BEGIN,
  SYMBOL_OPERATOR_MINUS,
  SYMBOL_OPERATOR_STAR,
  SYMBOL_OPERATOR_EQUAL,
  SYMBOL_OPERATOR_NOT_EQUAL,
  SYMBOL_OPERATOR_LESS_THAN,
  SYMBOL_OPERATOR_LESS_THAN_EQUAL,
  SYMBOL_OPERATOR_GREATER_THAN,
  SYMBOL_OPERATOR_GREATER_THAN_EQUAL,
  SYMBOL_OPERATOR_LEFT_PARENTHESIS,
  SYMBOL_OPERATOR_RIGHT_PARENTHESIS,
  SYMBOL_OPERATOR_LEFT_BRACKET,
  SYMBOL_OPERATOR_RIGHT_BRACKET,
  SYMBOL_OPERATOR_ASSIGN,
  SYMBOL_OPERATOR_DOT,
  SYMBOL_OPERATOR_COMMA,
  SYMBOL_OPERATOR_COLON,
  SYMBOL_OPERATOR_SEMICOLON,
  SYMBOL_RANGE_OPERATOR_END,

  SYMBOL_SENTINEL = SYMBOL_RANGE_OPERATOR_END
} StaticSymbol;

typedef unsigned long Symbol;

Symbol        symbol_from(const char *string, unsigned long size);
Symbol        symbol_take_from(char *string, unsigned long size);
const char   *symbol_string(Symbol symbol);
unsigned long symbol_size(Symbol symbol);

#endif
